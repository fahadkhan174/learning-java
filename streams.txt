public static <T> Set<T> findDuplicateByGrouping(List<T> list) {

       return list.stream()
               .collect(Collectors.groupingBy(Function.identity()
                       , Collectors.counting()))    // create a map {1=1, 2=1, 3=2, 4=2, 5=1, 7=1, 9=2}
               .entrySet().stream()                 // Map -> Stream
               .filter(m -> m.getValue() > 1)       // if map value > 1, duplicate element
               .map(Map.Entry::getKey)
               .collect(Collectors.toSet());
}
}
Stream<Integer> st1=Stream.of(2,4,7,5,3);
	long l12=	st1.filter(i->{
			if(i%2==0) {
				return true;
			}
			else return false;
		}).collect(Collectors.counting());
	
	System.out.println(l12);
	
	//"abc","defg","bcde","trefb"
	//for(int i=){}
		List<String> st2=Stream.of("abc","defg","bcde","trefb").filter(a->a.contains("b")).collect(Collectors.toList());
		System.out.println(st2);
		
List l23=	Stream.of(2,3,4,5,6).map(a->a*a).collect(Collectors.toList());
	System.out.println(l23);
	
	
List l24=	Stream.of(43,20,34,21,16,45,3).sorted().collect(Collectors.toList());
		System.out.println(l24);
		
	Optional<Integer> op1=	Stream.of(43,20,34,21,16,45,3).findFirst();
	if(op1.isPresent()) {
		System.out.println(op1.get());
	}
	Stream.of(43,20,34,21,16,45,3).forEach(a->System.out.println(a));
	System.out.println(Stream.of(43,20,34,21,16,45,3).sorted(Comparator.reverseOrder()).collect(Collectors.toList()));
